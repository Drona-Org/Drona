domain Zing extends ZingData
{

}

domain ZingData
{
    //// Types
    Type ::= { BOOL, INT, VOID } + String.

    //// Attributes
    Attrs ::= new (attr: { ASYNC, ACTIVATE, STATIC }, tail: any Attrs + { NIL }).

    //// Expressions
    Identifier    ::= new (name: String).
    Call   ::= new (args: any Args).
    New    ::= new (name: String, arraySize: any Expr + { NIL }).
    Apply  ::= new (op: { NOT, NEG, ADD, SUB, MUL, INTDIV, AND, OR, EQ, NEQ, LT, LE, GT, GE, DOT, IN, INDEX }, args: any Args).
    Args   ::= new (head: any Expr, tail: any Args + { NIL } ).              
    Expr   ::= Identifier + Call + New + Apply + Integer + Boolean + String.
    
    //// Statements
    Return   ::= new (expr: any Expr + { NIL }).
    Assert   ::= new (expr: any Expr, msg: String + { NIL }).
    Assume   ::= new (expr: any Expr).
    CallStmt ::= new (callExpr: any Call, attrs: any Attrs + { NIL }).
    Assign   ::= new (lhs: any Expr, rhs: any Expr).
    ITE      ::= new (cond: any Expr, true: any Stmt, false: any Stmt).
    While    ::= new (cond: any Expr, body: any Stmt).
	Foreach  ::= new (type: any Type, iter: String, set: any Expr, body: any Stmt).
    Seq      ::= new (s1: any Stmt, s2: any Stmt).
    Goto     ::= new (label: String).
    Stmt     ::= Assert + Assume + Assign + ITE + While + Foreach + Seq + Goto + CallStmt + Return + LabelStmt + { YIELD, NIL }.     
    LabelStmt  ::= new (label: String, stmt: any Stmt).
    Blocks   ::= new (block: LabelStmt, tail: any Blocks + { NIL }).

    //// Top-level declarations
    VarDecl   ::= new (name: String, type: any Type, attrs: any Attrs + { NIL }).
    VarDecls   ::= new (decl: VarDecl, tail: any VarDecls + { NIL }).
    MethodDecl ::= fun (name: String -> ins: any VarDecls + { NIL }, out: any Type, vars: any VarDecls + { NIL }, body: any Blocks + { NIL }, attrs: any Attrs + { NIL }).
    MethodDecls   ::= new (decl: MethodDecl, tail: any MethodDecls + { NIL }).
    ClassDecl ::= fun (name: String -> fields: any VarDecls + { NIL }, methods: any MethodDecls + { NIL }).
    EnumDecl ::= fun (name: String -> any EnumElems + { NIL }).
    EnumElems ::= new (name: String, tail: any EnumElems + { NIL }).
    ArrayDecl ::= new (name: String, innerType: any Type).
	SetDecl   ::= new (name: String, innerType: any Type).
    Decls ::= new (decl: EnumDecl + ClassDecl + ArrayDecl + SetDecl, tail: any Decls + { NIL }).
    File ::= new (name: String, decls: any Decls + { NIL }).
}
